import asyncio
from telethon import TelegramClient, events, Button

# --- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---
# 1. –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å my.telegram.org
API_ID = 123456  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API ID
API_HASH = ''  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API Hash

# 2. –î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = ''  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

# 3. ID
# ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890)
CHANNEL_ID = -1001234567890
ADMIN_ID = 1234567890  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ª–∏—á–Ω—ã–π Telegram ID

# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon, –Ω–æ –ù–ï –ó–ê–ü–£–°–ö–ê–ï–ú –µ–≥–æ –∑–¥–µ—Å—å
bot = TelegramClient('bot_session', API_ID, API_HASH)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
MESSAGES_TO_MODERATE = []
CURRENT_MESSAGE_INDEX = 0
MODERATION_IN_PROGRESS = False

async def send_next_for_moderation():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    global CURRENT_MESSAGE_INDEX, MODERATION_IN_PROGRESS

    if CURRENT_MESSAGE_INDEX < len(MESSAGES_TO_MODERATE):
        message_obj = MESSAGES_TO_MODERATE[CURRENT_MESSAGE_INDEX]
        message_id = message_obj.id
        
        keyboard = [
            [Button.inline("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", data=f'block_{message_id}')],
            [Button.inline("–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è", data=f'manual_{message_id}')],
            [Button.inline("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data=f'skip_{message_id}')]
        ]

        try:
            await bot.forward_messages(ADMIN_ID, message_id, from_peer=CHANNEL_ID)
            
            total = len(MESSAGES_TO_MODERATE)
            await bot.send_message(
                ADMIN_ID,
                f'–ü–æ—Å—Ç {CURRENT_MESSAGE_INDEX + 1}/{total}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                buttons=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
            CURRENT_MESSAGE_INDEX += 1
            await send_next_for_moderation()

    else:
        await bot.send_message(ADMIN_ID, 'üéâ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        MODERATION_IN_PROGRESS = False

@bot.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if event.sender_id != ADMIN_ID:
        return
    await event.reply(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π –∫–∞–Ω–∞–ª —Å —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /moderate, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.'
    )

@bot.on(events.NewMessage(pattern='/moderate'))
async def moderate_handler(event):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é."""
    global MESSAGES_TO_MODERATE, CURRENT_MESSAGE_INDEX, MODERATION_IN_PROGRESS
    
    if event.sender_id != ADMIN_ID:
        return
    if MODERATION_IN_PROGRESS:
        await event.reply("–ú–æ–¥–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    await event.reply('–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.')
    
    MESSAGES_TO_MODERATE = []
    CURRENT_MESSAGE_INDEX = 0
    MODERATION_IN_PROGRESS = True
    
    async with TelegramClient('user_session', API_ID, API_HASH) as client:
        async for message in client.iter_messages(CHANNEL_ID, reverse=True):
            if message and (message.text or message.media):
                MESSAGES_TO_MODERATE.append(message)

    if not MESSAGES_TO_MODERATE:
        await event.reply('–í –∫–∞–Ω–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.')
        MODERATION_IN_PROGRESS = False
        return

    await event.reply(f'‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {len(MESSAGES_TO_MODERATE)}.\n–ù–∞—á–∏–Ω–∞–µ–º!')
    await send_next_for_moderation()

@bot.on(events.CallbackQuery)
async def callback_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    global CURRENT_MESSAGE_INDEX

    if event.sender_id != ADMIN_ID:
        await event.answer("–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å.", alert=True)
        return

    await event.answer()

    query_data = event.data.decode('utf-8')
    action, message_id_str = query_data.split('_')
    message_id = int(message_id_str)
    
    try:
        channel_username = (await bot.get_entity(CHANNEL_ID)).username
        message_link = f'https://t.me/{channel_username}/{message_id}'
    except Exception:
        message_link = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}"


    if action == 'block':
        try:
            await bot.edit_message(
                CHANNEL_ID,
                message_id,
                text="(–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –º–µ—Å—Ç–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞)"
            )
            await event.edit(f'‚úÖ –ü–æ—Å—Ç #{message_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')
        except Exception as e:
            await event.edit(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç #{message_id}. –û—à–∏–±–∫–∞: {e}')
    
    elif action == 'manual':
        await event.edit(f'üëâ –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ #{message_id}:\n{message_link}')

    elif action == 'skip':
        await event.edit(f'‚û°Ô∏è –ü–æ—Å—Ç #{message_id} –ø—Ä–æ–ø—É—â–µ–Ω.')
    
    CURRENT_MESSAGE_INDEX += 1
    await asyncio.sleep(1) 
    await send_next_for_moderation()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ò–ú–ï–ù–ù–û –ó–î–ï–°–¨, –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    await bot.start(bot_token=BOT_TOKEN)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await bot.run_until_disconnected()

if __name__ == '__main__':
    # –≠—Ç–∞ —á–∞—Å—Ç—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–æ–º
    asyncio.run(main())
